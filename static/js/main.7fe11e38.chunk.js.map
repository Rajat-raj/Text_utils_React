{"version":3,"sources":["Components/About.js","Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","_useState","useState","_useState2","_slicedToArray","btnText","setBtnText","_useState3","color","backgroundColor","_useState4","myStyle","setmyStyle","React","createElement","Fragment","className","style","textAlign","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","onClick","Navbar","props","concat","mode","Link","to","title","data-bs-togglhref","e","aria-label","aria-current","about","toggleMode","htmlFor","toggleBtnMode","TextForm","emptyText","text","showAlert","setText","heading","value","onChange","event","console","log","target","rows","newText","toUpperCase","textLC","toLowerCase","textCB","document","getElementById","navigator","clipboard","writeText","result","replace","trim","split","filter","n","length","defaultProps","Alert","class","role","word","lower","charAt","slice","capitalize","msg","data-bs-dismiss","App","setMode","settoggleBtnMode","_useState5","_useState6","alert","setAlert","message","setTimeout","Router","body","Routes","Route","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.7fe11e38.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n    let head = {\r\n        textAlign :'center'\r\n    }\r\n\r\n    const [btnText,setBtnText]=useState(\"Enable Dark mode\")\r\n\r\n    const [myStyle,setmyStyle]=useState({\r\n        color : 'Black',\r\n        backgroundColor : 'White'\r\n    })\r\n    const handleDarkMode = ()=>{\r\n        if(myStyle.color === 'Black'){\r\n            setmyStyle({\r\n                color:'White',\r\n                backgroundColor:'Black'\r\n            })\r\n            setBtnText(\"Enable Light mode\")\r\n        }\r\n        else{\r\n            setmyStyle({\r\n                color:'Black',\r\n                backgroundColor:'White'\r\n            })\r\n            setBtnText(\"Enable Dark mode\")\r\n        }\r\n    }\r\n\r\n   \r\n  return (\r\n      <>\r\n      <div className='container' style={myStyle}>\r\n        <h1 style={head}>About US</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\">\r\n                    <button style={myStyle} className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        Project Name: TEXTUTILS\r\n                    </button>\r\n                    </h2>\r\n                    <div style={myStyle} id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <b>Description:</b>\r\n\r\n                        TEXTUTILS is a comprehensive and robust software toolkit designed to facilitate seamless and efficient text processing and manipulation tasks. This project is aimed at harnessing the power of natural language processing (NLP) and machine learning algorithms to help individuals, developers, and businesses streamline their text-related tasks. \r\n\r\n                        The toolkit provides a wide range of functionalities that include text extraction, text summarization, sentiment analysis, topic modeling, named entity recognition, language detection, and many more. The sophisticated underlying algorithms enable users to perform complex text analysis tasks in real-time, providing valuable insights into their text data.\r\n\r\n                        The TEXTUTILS project is developed with an easy-to-use API, making it accessible for developers with varying experience levels. It also includes a user-friendly GUI for non-tech users, enabling them to execute text-related tasks without any coding.\r\n\r\n                        The toolkit can be utilized in various fields like market research, customer service, content creation, academia, etc. For instance, it can be used for processing customer reviews, doing sentiment analysis, performing academic research, creating summaries of long articles, and much more.\r\n\r\n                        Furthermore, TEXTUTILS provides a scalable solution that can handle large volumes of text data, making it a reliable choice for big data applications. This robust tool opens up new horizons for text data processing, bringing in more efficiency and productivity. \r\n\r\n                        Overall, TEXTUTILS is a powerful tool designed to make text manipulation tasks faster, more reliable, and highly accurate.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\">\r\n                <button style={myStyle} className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                    Accordion Item #2\r\n                </button>\r\n                </h2>\r\n                <div style={myStyle} id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\">\r\n                <button style={myStyle} className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                    Accordion Item #3\r\n                </button>\r\n                </h2>\r\n                <div style={myStyle} id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            <div className=\"container\">\r\n            <button onClick={handleDarkMode} type=\"button\" className=\"btn btn-primary my-1\">{btnText}</button>\r\n            </div>\r\n        </div>\r\n    </>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">\r\n            {props.title}\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-togglhref=\"/\"\r\n            e=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">\r\n                  {props.about}\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.toggleBtnMode}</label>\r\n        </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nNavbar.propTypes={\r\n    title: PropTypes.string,\r\n    about: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps ={\r\n    title:'Set title',\r\n    about:'Set about'\r\n}","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n    const handleUCClick = ()=>{\r\n        console.log(\"Button Upper now clicked - \" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Text now changed to UpperCase','success');\r\n        emptyText();\r\n    }\r\n    const handleLCclick=()=>{\r\n        let textLC = text.toLowerCase();\r\n        setText(textLC);\r\n        props.showAlert('Text now changed to LowerCase','success');\r\n        emptyText();\r\n    }\r\n    const handleCLclick=()=>{\r\n        let textCL = (\"\");\r\n        setText(textCL);\r\n        props.showAlert('Text now clear','danger');\r\n        emptyText();\r\n    }\r\n    const handleCBclick=()=>{\r\n        let textCB = document.getElementById(\"Text-form\");\r\n        navigator.clipboard.writeText(textCB.value);\r\n        props.showAlert('Text now copied','warning');\r\n        emptyText();\r\n    }\r\n    const handleRESclick=()=>{\r\n        let result = text.replace(/\\s+/g, ' ').trim();\r\n        setText(result);\r\n        props.showAlert('Extra space now removed on text','primary');\r\n        emptyText();\r\n    }\r\n    const handleOnChange =(event)=>{\r\n        console.log(\"onchange\")\r\n        setText(event.target.value)\r\n    }\r\n    //EMPTY TEXT\r\n    const emptyText = ()=>{\r\n      if(text===\"\"){\r\n        props.showAlert('Kindly text somethink here','warning');\r\n      }\r\n    }\r\n\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n    <div className=\"container\">\r\n      <h1 style={{color:props.mode==='light'?'black':'white'}}>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"Text-form\" rows=\"8\" style={{backgroundColor:props.mode==='light'?'white':'grey', color:props.mode==='light'?'black':'white'}}></textarea>\r\n        <button type=\"button\" className=\"btn btn-info my-2 mx-2\" onClick={handleUCClick}>Convert to Upper case</button>\r\n        <button type=\"button\" className=\"btn btn-info my-2 mx-2\" onClick={handleLCclick}>Convert to Lower case</button>\r\n        <button type=\"button\" className=\"btn btn-danger my-2 mx-2\" onClick={handleCLclick}>Clear</button>\r\n        <button type=\"button\" className=\"btn btn-info my-2 mx-2\" onClick={handleCBclick} id=\"myBox\">Copy to clipbord</button>\r\n        <button type=\"button\" className=\"btn btn-info my-2 mx-2\" onClick={handleRESclick}>Remove extra spaces</button>\r\n      </div>\r\n    </div>\r\n    <div style={{color:props.mode==='light'?'black':'white'}}>\r\n        <h3>You text summary</h3>\r\n        <p>{text.split(\" \").filter(function(n) { return n !== '' }).length} word and {text.length} characters</p>\r\n        <p>{0.008 * text.split(\" \").filter(function(n) { return n !== '' }).length} Minutes to read</p>\r\n        <h4>Preview</h4>\r\n        <p>{text}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n    }\r\n  return (\r\n      props.Alert && <div class={`alert alert-${props.Alert.type} alert-dismissible fade show`} role=\"alert\">\r\n          <strong>{capitalize(props.Alert.type)}</strong>: {props.Alert.msg}\r\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n          </div>   \r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import React from \"react\";\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport About from \"./Components/About\";\nimport Navbar from \"./Components/Navbar\";\nimport TextForm from \"./Components/TextForm\";\nimport Alert from \"./Components/Alert\";\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n// import { BrowserRouter as Router, Route, Switch, Routes } from 'react-router-dom';\nimport { BrowserRouter as Router,Routes, Route} from \"react-router-dom\";\n\n\n\nfunction App() {\n  const[mode,setMode]=useState('light');\n  const[toggleBtnMode,settoggleBtnMode]=useState('Enable Dark Mode')\n  const[alert,setAlert]=useState(null);\n\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode =()=>{\n    if(mode==='light'){\n      setMode('dark');\n      settoggleBtnMode('Enable light mode');\n      document.body.style.backgroundColor='#6c757d'\n      showAlert('Dark mode enabled','success');\n    }\n    else{\n      setMode('light');\n      settoggleBtnMode('Enable Dark mode');\n      document.body.style.backgroundColor='White'\n      showAlert('Light mode enabled','success');\n    }\n  }\n  return (\n    <> \n    <Router>\n          <Navbar title=\"TextUtils\" about=\"About\" mode={mode} toggleMode={toggleMode} toggleBtnMode={toggleBtnMode}/>\n          <Alert Alert={alert}/>\n      <div className=\"container my-3\">\n        <Routes>\n            <Route exact path=\"/about\" element={<About />}></Route>\n            <Route exact path=\"/\" element={<TextForm heading=\"Enter the Text to analyze\" mode={mode} showAlert={showAlert}/>} ></Route>\n        </Routes>\n      </div>\n    </Router>  \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}